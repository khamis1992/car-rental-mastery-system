import { supabase } from '@/integrations/supabase/client';
import { InvoiceBusinessService } from './InvoiceBusinessService';
import { InvoiceFormData } from '@/types/invoice';
import { serviceContainer } from '@/services/Container/ServiceContainer';

export interface DirectPaymentData {
  contract_id: string;
  customer_id: string;
  amount: number;
  payment_date: string;
  payment_method: 'cash' | 'card' | 'bank_transfer' | 'check' | 'online';
  transaction_reference?: string;
  bank_name?: string;
  check_number?: string;
  notes?: string;
  invoice_description?: string;
}

export class AutoInvoiceService {
  private invoiceService: InvoiceBusinessService;

  constructor() {
    this.invoiceService = serviceContainer.getInvoiceBusinessService();
  }

  async createDirectPayment(paymentData: DirectPaymentData): Promise<{ invoice: any; payment: any }> {
    // Validate contract and customer
    await this.validateContractAndCustomer(paymentData.contract_id, paymentData.customer_id);

    // Generate invoice data automatically
    const invoiceData = await this.generateInvoiceData(paymentData);

    // Create the invoice
    const invoice = await this.invoiceService.createInvoice(invoiceData);

    // Create the payment with auto-generated flag
    const paymentService = serviceContainer.getPaymentBusinessService();
    const payment = await paymentService.createPayment({
      invoice_id: invoice.id,
      amount: paymentData.amount,
      payment_date: paymentData.payment_date,
      payment_method: paymentData.payment_method,
      transaction_reference: paymentData.transaction_reference,
      bank_name: paymentData.bank_name,
      check_number: paymentData.check_number,
      notes: paymentData.notes,
    });

    // Mark as auto-generated
    await this.markPaymentAsAutoGenerated(payment.id);

    return { invoice, payment };
  }

  private async generateInvoiceData(paymentData: DirectPaymentData): Promise<InvoiceFormData> {
    // Get contract details
    const contract = await this.getContractDetails(paymentData.contract_id);
    
    // Calculate due date (30 days from payment date)
    const dueDate = new Date(paymentData.payment_date);
    dueDate.setDate(dueDate.getDate() + 30);

    // Generate invoice items based on payment amount and contract
    const items = await this.generateInvoiceItems(contract, paymentData.amount, paymentData.invoice_description);

    return {
      contract_id: paymentData.contract_id,
      customer_id: paymentData.customer_id,
      due_date: dueDate.toISOString().split('T')[0],
      invoice_type: 'rental', // Default to rental, can be customized
      tax_amount: 0, // Can be calculated based on business rules
      discount_amount: 0,
      payment_terms: 'تم الدفع مسبقاً - فاتورة منشأة تلقائياً',
      notes: paymentData.notes || 'فاتورة منشأة تلقائياً عند تسجيل الدفعة',
      terms_and_conditions: 'تم إنشاء هذه الفاتورة تلقائياً عند تسجيل الدفعة المقدمة',
      items: items
    };
  }

  private async generateInvoiceItems(contract: any, paymentAmount: number, description?: string): Promise<any[]> {
    const items = [];

    // Main rental item
    items.push({
      description: description || `دفعة إيجار - ${contract.vehicle_info} - العقد رقم ${contract.contract_number}`,
      item_type: 'rental' as const,
      quantity: 1,
      unit_price: paymentAmount,
      start_date: contract.start_date,
      end_date: contract.end_date,
      daily_rate: contract.daily_rate
    });

    return items;
  }

  private async validateContractAndCustomer(contractId: string, customerId: string): Promise<void> {
    const { data: contract, error: contractError } = await supabase
      .from('contracts')
      .select('id, customer_id, status')
      .eq('id', contractId)
      .single();

    if (contractError || !contract) {
      throw new Error('العقد غير موجود');
    }

    if (contract.customer_id !== customerId) {
      throw new Error('العميل غير مطابق للعقد');
    }

    if (!['active', 'completed'].includes(contract.status)) {
      throw new Error('حالة العقد لا تسمح بإنشاء فواتير');
    }
  }

  private async getContractDetails(contractId: string): Promise<any> {
    const { data: contract, error } = await supabase
      .from('contracts')
      .select(`
        *,
        customers(name, phone, email),
        vehicles(make, model, license_plate)
      `)
      .eq('id', contractId)
      .single();

    if (error || !contract) {
      throw new Error('فشل في جلب تفاصيل العقد');
    }

    // Add vehicle_info for display
    const vehicleInfo = `${contract.vehicles?.make} ${contract.vehicles?.model} - ${contract.vehicles?.license_plate}`;
    
    return {
      ...contract,
      vehicle_info: vehicleInfo
    };
  }

  private async markPaymentAsAutoGenerated(paymentId: string): Promise<void> {
    const { error } = await supabase
      .from('payments')
      .update({ auto_generated_invoice: true })
      .eq('id', paymentId);

    if (error) {
      console.warn('Failed to mark payment as auto-generated:', error);
    }
  }

  async getAutoGeneratedInvoices(): Promise<any[]> {
    const { data, error } = await supabase
      .from('payments')
      .select(`
        *,
        invoices(
          *,
          customers(name, phone),
          contracts(contract_number)
        )
      `)
      .eq('auto_generated_invoice', true)
      .order('created_at', { ascending: false });

    if (error) {
      throw error;
    }

    return data || [];
  }
}